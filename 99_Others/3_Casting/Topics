Const cast
==========
1. To cast away constness of the const pointer
2. Don't try this if value itself is constant

Static cast
=========== 
1. For implicit conversion like int a = (float)b
2. Conversion between types is provided through conversion operator or constructor
3. Restrictive than c-style like conversion from char pointer to int pointer
4. Private inheritance - converting from derived to base
5. All upcast and never use for confused downcast
6. Preferred to use when converting to void* or from void*

#include <iostream> 
using namespace std; 
int main() 
{ 
	float f = 3.5; 
	int a = f; // this is how you do in C 
	int b = static_cast<int>(f); 
	cout << b; 
} 

#include <iostream> 
using namespace std; 
int main() 
{ 
	int a = 10; 
	char c = 'a'; 

	// pass at compile time, may fail at run time 
	int* q = (int*)&c; 
	int* p = static_cast<int*>(&c); 
	return 0; 
} 


#include <iostream> 
#include <string> 
using namespace std; 
class Int { 
	int x; 

public: 
	Int(int x_in = 0) 
		: x{ x_in } 
	{ 
		cout << "Conversion Ctor called" << endl; 
	} 
	operator string() 
	{ 
		cout << "Conversion Operator" << endl; 
		return to_string(x); 
	} 
}; 
int main() 
{ 
	Int obj(3); 
	string str = obj; 
	obj = 20; 
	string str2 = static_cast<string>(obj); 
	obj = static_cast<Int>(30); 
	return 0; 
} 

#include <iostream> 
using namespace std; 
class Base { 
}; 
class Derived : public Base { 
}; 
int main() 
{ 
	Derived d1; 
	Base* b1 = (Base*)(&d1); // allowed 
	Base* b2 = static_cast<Base*>(&d1); 

	return 0; 
} 

#include <iostream> 
using namespace std; 
class Base { 
}; 
class Derived : private Base { // Inherited private/protected not public 
}; 
int main() 
{ 
	Derived d1; 
	Base* b1 = (Base*)(&d1); // allowed 
	Base* b2 = static_cast<Base*>(&d1); 
	return 0; 
} 

#include <iostream> 
int main() 
{ 
	int i = 10; 
	void* v = static_cast<void*>(&i); 
	int* ip = static_cast<int*>(v); 
	return 0; 
} 


Dynamic cast
============
1. Base * b1 = d1;
    Derived * d2 = b1;
    Only purpose of dynamic cast
    For conversion of reference use exception and catch the same

// dynamic_cast
#include <iostream>
#include <exception>
using namespace std;

class CBase { virtual void dummy() {} };
class CDerived: public CBase { int a; };

int main () {
  try {
    CBase * pba = new CDerived;
    CBase * pbb = new CBase;
    CDerived * pd;

    pd = dynamic_cast<CDerived*>(pba);
    if (pd==0) cout << "Null pointer on first type-cast" << endl;

    pd = dynamic_cast<CDerived*>(pbb);
    if (pd==0) cout << "Null pointer on second type-cast" << endl;

  } catch (exception& e) {cout << "Exception: " << e.what();}
  return 0;
}

Reinterpret cast 
================
1. Danger cast
2. Converts pointer of one type to another type like pointers from class mongo to class apple 


// CPP program to demonstrate working of 
// reinterpret_cast 
#include <iostream> 
using namespace std; 

int main() 
{ 
	int* p = new int(65); 
	char* ch = reinterpret_cast<char*>(p); 
	cout << *p << endl; 
	cout << *ch << endl; 
	cout << p << endl; 
	cout << ch << endl; 
	return 0; 
} 






// CPP code to illustrate using structure 
#include <bits/stdc++.h> 
using namespace std; 

// creating structure mystruct 
struct mystruct { 
	int x; 
	int y; 
	char c; 
	bool b; 
}; 

int main() 
{ 
	mystruct s; 

	// Assigning values 
	s.x = 5; 
	s.y = 10; 
	s.c = 'a'; 
	s.b = true; 

	// data type must be same during casting 
	// as that of original 

	// converting the pointer of 's' to, 
	// pointer of int type in 'p'. 
	int* p = reinterpret_cast<int*>(&s); 

	cout << sizeof(s) << endl; 

	// printing the value currently pointed by *p 
	cout << *p << endl; 

	// incrementing the pointer by 1 
	p++; 

	// printing the next integer value 
	cout << *p << endl; 

	p++; 

	// we are casting back char * pointed 
	// by p using char *ch. 
	char* ch = reinterpret_cast<char*>(p); 

	// printing the character value 
	// pointed by (*ch) 
	cout << *ch << endl; 

	ch++; 

	/* since, (*ch) now points to boolean value, 
	so it is required to access the value using 
	same type conversion.so, we have used 
	data type of *n to be bool. */

	bool* n = reinterpret_cast<bool*>(ch); 
	cout << *n << endl; 

	// we can also use this line of code to 
	// print the value pointed by (*ch). 
	cout << *(reinterpret_cast<bool*>(ch)); 

	return 0; 
} 



// CPP code to illustrate the pointer reinterpret 
#include <iostream> 
using namespace std; 

class A { 
public: 
	void fun_a() 
	{ 
		cout << " In class A\n"; 
	} 
}; 

class B { 
public: 
	void fun_b() 
	{ 
		cout << " In class B\n"; 
	} 
}; 

int main() 
{ 
	// creating object of class B 
	B* x = new B(); 

	// converting the pointer to object 
	// referenced of class B to class A 
	A* new_a = reinterpret_cast<A*>(x); 

	// accessing the function of class A 
	new_a->fun_a(); 
	return 0; 
} 



