*** Note ***

Classes & Objects:
==================
1. Object Oriented Programming Basics

=======================================================================================================================================================================
=======================================================================================================================================================================
=======================================================================================================================================================================
2. Class, Constructor & Destructor

=======================================================================================================================================================================
=======================================================================================================================================================================
=======================================================================================================================================================================
3. Structures

=======================================================================================================================================================================
=======================================================================================================================================================================
=======================================================================================================================================================================
4. Non-static Data Member Initializers (C++11)

=======================================================================================================================================================================
=======================================================================================================================================================================
=======================================================================================================================================================================
5. this Pointer

=======================================================================================================================================================================
=======================================================================================================================================================================
=======================================================================================================================================================================
6. Constant Member Functions

=======================================================================================================================================================================
=======================================================================================================================================================================
=======================================================================================================================================================================
7. Static Class Members

=======================================================================================================================================================================
=======================================================================================================================================================================
=======================================================================================================================================================================
8. Copy Constructor 

=======================================================================================================================================================================
=======================================================================================================================================================================
=======================================================================================================================================================================
9. Delegating Constructors (C++11)

Sometimes it is useful for a constructor to be able to call another constructor of the same class. 
This feature, called Constructor Delegation, was introduced in C++ 11.

However, C++ Constructor delegation provides an elegant solution, by allowing us to call a constructor by placing it in the initializer list of other constructors

It is very important to note that constructor delegation is different from calling a constructor from inside the body of another constructor, 
which is not recommended because doing so creates another object and initializes it, without doing anything to the object created by the constructor that called it.

=======================================================================================================================================================================
=======================================================================================================================================================================
=======================================================================================================================================================================
10. Explicitly Defaulted & Deleted Functions (C++11)

Explicitly defaulted function declaration is a new form of function declaration that is introduced into the C++11 standard which allows you to append 
the =default; specifier to the end of a function declaration to declare that function as an explicitly defaulted function. 
This makes the compiler generate the default implementations for explicitly defaulted functions, which are more efficient than manually programmed 
function implementations.

A defaulted function needs to be a special member function (default constructor, copy constructor, destructor etc), or has no default arguments

What are the advantages of =default when we could simply leave an empty body of the function using {}?
Even though the two may behave the same, there are still benefits of using default over leaving an empty body of the constructor. 
The following points explain how:
* Giving a user-defined constructor, even though it does nothing, makes the type not an aggregate and also not trivial. 
  If you want your class to be an aggregate or a trivial type (or by transitivity, a POD type), then you need to use = default.
* Using = default can also be used with copy constructor and destructors. An empty copy constructor, for example, 
  will not do the same as a defaulted copy constructor (which will perform member-wise copy of its members). 
  Using the = default syntax uniformly for each of these special member functions makes code easier to read.

-----------------------------------------------------------------------------------------------------------------------

delete operator is used to disable the usage of a member function. This is done by appending the =delete; specifier to the end of that function declaration

Any member function whose usage has been disabled by using the =delete specifier is known as an expicitly deleted function.

It is very important to note that A deleted function is implicitly inline. A deleted definition of a function must be the first declaration of the function

=======================================================================================================================================================================
=======================================================================================================================================================================
=======================================================================================================================================================================
